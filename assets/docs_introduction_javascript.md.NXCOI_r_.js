import{_ as a,c as o,K as e,o as l}from"./chunks/framework.Chz_bhN-.js";const u=JSON.parse('{"title":"JavaScript","description":null,"frontmatter":{"title":"JavaScript","description":null,"order":4},"headers":[],"relativePath":"docs/introduction/javascript.md","filePath":"docs/introduction/javascript.md"}'),t={name:"docs/introduction/javascript.md"};function n(p,s,c,r,i,d){return l(),o("div",null,s[0]||(s[0]=[e(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1> <p>Spectre.css is primarily a CSS framework, which means most of its features and interactivity <strong>do not</strong> require JavaScript. This is one of its strengths; it provides a lot of functionality through CSS trickery alone.</p> <p>Its interactive effects are simulated primarily using CSS pseudo-classes and selectors, for example:</p> <ul><li><a href="./../elements/forms.html">Checkboxes</a> – the <code>:checked</code> and <code>:before</code> pseudo-classes is used to style the checkbox element</li> <li><a href="./../components/accordions.html">Accordions</a> – the <code>:checked</code> and <code>~</code> sibling-selector is used to show and hide the accordion elements</li> <li><a href="./../components/modals.html">Modals</a> – the <code>:target</code> pseudo-class and location <code>#hash</code> is used to display the specific modal element</li> <li><a href="./../experimentals/carousels.html">Carousels</a> – the <code>:checked</code> and <code>~</code> sibling-selector is used to show the specific slide element</li> <li><a href="./../experimentals/parallax.html">Parallax</a> – the <code>:hover</code> and <code>~</code> sibling-selector is used to tilt the image container</li></ul> <p>However, there are some cases where JavaScript can or <em>must</em> be used to enhance functionality:</p> <ul><li>toggling <strong>classes</strong> – such as adding an <code>active</code> class to show or hide a specific <a href="./../components/modals.html">modal</a> element</li> <li>toggling <strong>related classes</strong> – such as showing <a href="./../components/tabs.html">tab</a> <em>content</em> in response to a tab <strong>item</strong> click</li> <li>changing <strong>attributes</strong> – such as setting a <code>data-tooltip</code> attribute to surface the control&#39;s current <strong>value</strong></li> <li>updating <strong>elements</strong> – such as fetching and previewing elements to be shown in an <a href="./../experimentals/autocomplete.html">autocomplete</a></li></ul> <p>Essentially, Spectre CSS is a CSS-<em>first</em> framework where:</p> <ul><li>CSS can be used if simplicity or a low-tech solution is preferred</li> <li>JavaScript can be used where it would be more flexible or pragmatic</li></ul> <p>To indicate this, note that left-hand menu items will be marked with:</p> <ul><li><small class="label label-secondary">JS</small> – where JavaScript is optional</li> <li><small class="label label-primary">JS</small> – where JavaScript is required</li></ul> <h2 id="spa-compatibility" tabindex="-1">SPA Compatibility <a class="header-anchor" href="#spa-compatibility" aria-label="Permalink to &quot;SPA Compatibility&quot;">​</a></h2> <p>In order to achieve some of its CSS-only manipulation of the page, Spectre CSS relies on using the location <code>#hash</code> along with the <code>:target</code> pseudo-selector to display or hide elements.</p> <p>Note that certain frameworks&#39; routing solutions may intercept hash-based routing and either prevent Spectre CSS from working the way it should, or just behave unexpectedly. In those situations, you should lean on the explicit classes, such as adding an <code>active</code> class to modal containers, rather than the combination of location <code>#hash</code> and <code>:target</code> pseudo-selector combination.</p> <p>For example, rather than a CSS-only solution:</p> <div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- button trigger --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;btn btn-primary&quot;</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;#modal-1&quot;</span><span style="color:#24292E;">&gt;Open Modal&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- modal container --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal&quot;</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal-1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">a</span><span style="color:#6F42C1;"> href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;#close&quot;</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal-overlay&quot;</span><span style="color:#6F42C1;"> aria-label</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;Close&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal-container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span></code></pre></div><p>Use JavaScript explicitly to add or remove classes:</p> <div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- button trigger --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;btn btn-primary&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">   onclick</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">document</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#032F62;">(&#39;modal-1&#39;).</span><span style="color:#24292E;">classList</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">add</span><span style="color:#032F62;">(&#39;active&#39;)&quot;</span><span style="color:#24292E;">&gt;Open Modal&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- modal container --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal&quot;</span><span style="color:#6F42C1;"> id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal-1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">a</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal-overlay&quot;</span><span style="color:#6F42C1;"> aria-label</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;Close&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">     onclick</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">document</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#032F62;">(&#39;modal-1&#39;).</span><span style="color:#24292E;">classList</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">remove</span><span style="color:#032F62;">(&#39;active&#39;)&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#6F42C1;"> class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;modal-container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span></code></pre></div>`,32)]))}const h=a(t,[["render",n]]);export{u as __pageData,h as default};
