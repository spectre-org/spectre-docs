import{_ as e,c as a,a3 as n,o}from"./chunks/framework.DzIAwTRr.js";const y=JSON.parse('{"title":"Build","description":null,"frontmatter":{"title":"Build","description":null,"order":3,"outline":"deep"},"headers":[],"relativePath":"docs/get-started/build.md","filePath":"docs/get-started/build.md"}'),l={name:"docs/get-started/build.md"};function p(t,s,c,r,i,d){return o(),a("div",null,s[0]||(s[0]=[n(`<h1 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Build&quot;">​</a></h1> <p>This section assumes you are using a modern bundling setup.</p> <p>There are various ways to customise the build output:</p> <ul><li><a href="#user-variables">user variables</a> – to customise the look and feel</li> <li><a href="#selective-imports">selective imports</a> – to include only the classes you need</li> <li><a href="#isolating-classes">isolating classes</a> – to make Spectre play nice with other frameworks</li></ul> <h2 id="user-variables" tabindex="-1">User variables <a class="header-anchor" href="#user-variables" aria-label="Permalink to &quot;User variables&quot;">​</a></h2> <p>Create a new file, for example <code>assets/spectre.scss</code>.</p> <p>In this file, override Spectre&#39;s <a href="./customisation.html">variables</a> then import Spectre&#39;s SCSS source:</p> <div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E36209;">$primary-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#2e5bec</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#E36209;">$dark-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#3e396b</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;node_modules/@spectre-org/spectre-css/src/spectre&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>If you have a lot of variables, you can move them to a partial, e.g. <code>_variables.scss</code>:</p> <div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;./variables&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;node_modules/@spectre-org/spectre-css/src/spectre&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Finally, in your project&#39;s entry point, import your modified version of Spectre:</p> <div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#032F62;"> &#39;./assets/spectre.scss&#39;</span></span></code></pre></div><h2 id="selective-imports" tabindex="-1">Selective imports <a class="header-anchor" href="#selective-imports" aria-label="Permalink to &quot;Selective imports&quot;">​</a></h2> <p>If you only want to use some of Spectre&#39;s features, you can import just the partials you need:</p> <div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;node_modules/@spectre-org/spectre-css/src/buttons&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;node_modules/@spectre-org/spectre-css/src/forms&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;node_modules/@spectre-org/spectre-css/src/...&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>The full list of partials can be found at:</p> <ul><li><a href="https://github.com/spectre-org/spectre-css/tree/main/src" target="_blank" rel="noreferrer">https://github.com/spectre-org/spectre-css/tree/main/src</a></li></ul> <h4 id="shortening-the-paths" tabindex="-1">Shortening the paths <a class="header-anchor" href="#shortening-the-paths" aria-label="Permalink to &quot;Shortening the paths&quot;">​</a></h4> <p>If you intend to import many partials, these long paths can become unwieldy.</p> <p>You might consider using a library like <a href="https://github.com/davestewart/alias-hq" target="_blank" rel="noreferrer">Alias HQ</a> which will allow you to alias Spectre&#39;s <code>src</code> folder:</p> <div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// tsconfig.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#032F62;">  &quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">    &quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">      &quot;@spectre/*&quot;</span><span style="color:#24292E;">: [ </span><span style="color:#032F62;">&quot;node_modules/@spectre-org/spectre-css/src/*&quot;</span><span style="color:#24292E;"> ],</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// assets/spectre.scss</span></span>
<span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;@spectre/forms&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;@spectre/buttons&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">@import</span><span style="color:#032F62;"> &quot;@spectre/...&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="isolating-classes" tabindex="-1">Isolating classes <a class="header-anchor" href="#isolating-classes" aria-label="Permalink to &quot;Isolating classes&quot;">​</a></h2> <p>There are times when you need to isolate Spectre CSS&#39;s classes from other frameworks to prevent collisions, or constrain Spectre CSS to a specific area of the page, for example in documentation sites.</p> <p>Spectre CSS offers two approaches, namespacing and prefixing.</p> <h4 id="approaches" tabindex="-1">Approaches <a class="header-anchor" href="#approaches" aria-label="Permalink to &quot;Approaches&quot;">​</a></h4> <p><strong>Namespacing</strong> ensures Spectre CSS classes can only be used under a specific selector:</p> <div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// applies only under &lt;article class=&quot;docs&quot;&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">.docs</span><span style="color:#6F42C1;"> .label</span><span style="color:#24292E;"> { ... }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// applies anywhere but &lt;article class=&quot;docs&quot;&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">:not</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">.docs</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">.label</span><span style="color:#24292E;"> { ... }</span></span></code></pre></div><p><strong>Prefixing</strong> changes the name of Spectre CSS classes, so you&#39;ll have to prefix them to use them:</p> <div class="language-scss"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// applies only to &lt;label class=&quot;s-label&quot;&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">.s-label</span><span style="color:#24292E;"> { ... }</span></span></code></pre></div><h4 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h4> <p>To use this in your own projects, you&#39;ll need to clone the repo and build the files from source.</p> <p>Spectre uses <a href="https://gulpjs.com/" target="_blank" rel="noreferrer">Gulp</a> to build its files, and actually uses namespacing to build the stylesheets for these very docs, ensuring Spectre CSS classes only work under the <code>.vp-docs</code> div.</p> <p>You should be able to copy the existing <code>gulpfile.js</code> scripts to configure namespacing or prefixing as required:</p> <div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// namespace under \`main\` and generate new files in \`./dist/namespace/\`</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> namespace</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> isolate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;namespace&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;main&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prefix with \`sp-\` and generate a minified version of \`spectre.css\` in \`./dist/lib/\`</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> prefix</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> isolate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;prefix&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;sp-&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    names: </span><span style="color:#032F62;">&#39;spectre&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    output: </span><span style="color:#032F62;">&#39;./dist/lib/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    minOnly: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The full options to pass to the <code>isolate()</code> helper are:</p> <ul><li><code>names</code> – One (<code>string</code>) or more (<code>string[]</code>) names of files to prefix, defaults to <code>&quot;*&quot;</code> (all files)</li> <li><code>output</code> – The output folder, defaults to <code>./dist/&lt;type&gt;</code></li> <li><code>minOnly</code> – Output minified files only, defaults to <code>false</code></li></ul> <p>You can then run these scripts from the command line with:</p> <div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span>gulp namespace</span></span>
<span class="line"><span>gulp prefix</span></span></code></pre></div>`,68)]))}const h=e(l,[["render",p]]);export{y as __pageData,h as default};
